pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        APP_NAME = 'test-app'
        KUBE_CONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Frontend') {
            steps {
                dir('app/frontend') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/${APP_NAME}/frontend:${BUILD_NUMBER} .'
                    sh 'docker tag ${DOCKER_REGISTRY}/${APP_NAME}/frontend:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${APP_NAME}/frontend:latest'
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                dir('app/backend') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/${APP_NAME}/backend:${BUILD_NUMBER} .'
                    sh 'docker tag ${DOCKER_REGISTRY}/${APP_NAME}/backend:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${APP_NAME}/backend:latest'
                }
            }
        }
        
        stage('Build Database') {
            steps {
                dir('app/database') {
                    sh 'docker build -t ${DOCKER_REGISTRY}/${APP_NAME}/database:${BUILD_NUMBER} .'
                    sh 'docker tag ${DOCKER_REGISTRY}/${APP_NAME}/database:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${APP_NAME}/database:latest'
                }
            }
        }
        
        stage('Push Images') {
            steps {
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/frontend:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/frontend:latest'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/backend:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/backend:latest'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/database:${BUILD_NUMBER}'
                sh 'docker push ${DOCKER_REGISTRY}/${APP_NAME}/database:latest'
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        
        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        
        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                sh 'export KUBECONFIG=${KUBE_CONFIG}'
                sh 'kubectl apply -f kubernetes/namespace.yaml'
                sh 'kubectl apply -f kubernetes/frontend.yaml'
                sh 'kubectl apply -f kubernetes/backend.yaml'
                sh 'kubectl apply -f kubernetes/database.yaml'
                sh 'kubectl apply -f kubernetes/istio/gateway.yaml'
                sh 'kubectl apply -f kubernetes/istio/virtual-services.yaml'
                sh 'kubectl rollout restart deployment frontend -n test-app'
                sh 'kubectl rollout restart deployment backend -n test-app'
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh 'kubectl get pods -n test-app'
                sh 'kubectl get svc -n test-app'
                sh 'kubectl get virtualservices -n test-app'
                sh 'kubectl get gateway -n test-app'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed!'
        }
    }
}